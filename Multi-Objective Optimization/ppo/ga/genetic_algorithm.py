# coding=gbk

import random
import networkx as nx
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import logging

'''获取最短路径'''
shortest_path = pd.read_csv('../data/facebook/facebook_shortest_path.csv')
shortest_path_np = np.asarray(shortest_path)
path_list = shortest_path_np.tolist()

# 构造图
def get_graph(G, node_number, r_sources, c_sources):
    # G = nx.DiGraph()
    # H = nx.path_graph(node_number)
    # G.add_nodes_from(H)

    # 初始化节点，并初始化状态
    for i in range(node_number):
        if i in r_sources:
            G.add_node(i, status='red', time=max_path)
        elif i in c_sources:
            G.add_node(i, status='green', time=max_path)
        else:
            G.add_node(i,status='yellow',time=max_path)
    # 添加边，并初始化权值
    # for i in range(node_number):
    #     for j in range(node_number):
    #         if i != j:
    #             rand_edge(i, j)
    return G

# 修改社交网络图，加入反谣言种子集
def update_graph(G, node_number, r_sources, c_sources):
    for i in range(node_number):
        G.nodes[i]['status'] = 'yellow'
        G.nodes[i]['time'] = max_path
    for i in range(len(c_sources)):
        G.nodes[c_sources[i]]['status'] = 'green'
    for i in range(len(r_sources)):
        G.nodes[r_sources[i]]['status'] = 'red'
    return G

# 随机概率添加边
def rand_edge(vi,vj,p=0.05):
    # 随机概率添加边
    probability = random.random()
    # 随机概率添加权值
    weight = random.randint(1,10)
    if(probability<p):
        G.add_weighted_edges_from([(vi,vj,weight)])

# 获取所有节点的感染时间
def get_time(G,sources):
    shortest_path_lists = []
    time_list = []
    # # 获得每个源节点到任意节点的单源最短路径
    # for i in sources:
    #     one_of_shortest_path = []
    #     for j in range(node_number):
    #         try:
    #             one_of_shortest_path.append(nx.dijkstra_path_length(G, i, j))
    #             # print("{0}->{1}={2}".format(i,j,nx.dijkstra_path_length(G, i, j)))
    #             # print(nx.dijkstra_path(G,i,j))
    #         except:
    #             one_of_shortest_path.append(max_path)
    #             # print("no path")
    #     shortest_path_lists.append(one_of_shortest_path)

    for i in sources:
        shortest_path_lists.append(path_list[i])
    # 初始化感染时间列表
    for i in range(node_number):
        time_list.append(max_path)

    # 比较每个源节点到任意节点的感染时间，取最小感染时间
    for shortest_path_list in shortest_path_lists:
        # print("0->任何节点{0}".format(shortest_path_list))
        for i in range(node_number):
            if(shortest_path_list[i]<time_list[i]):
                time_list[i] = shortest_path_list[i]
    return time_list

'''
1.生成种群
2.交叉
3.选择
'''

# 生成种群
# 染色体基因数(k)，种群中个体数量p_num, 总用户数nude_number
def produce_population(population, k, p_num, node_number, r_sources):
    # 随机生成p_num个个体
    while (len(population) < p_num):
        nodes = list(range(0, node_number))
        for i in r_sources:
            if i in nodes:
                nodes.remove(i)
        res = random.sample(nodes, k)
        entity = []
        for i in range(len(res)):
            entity.append(res[i])
        entity.sort()
        population.append(entity)
        print(population)
    return population

# 画图
def graph_show(G):
    colors = []
    for i in range(node_number):
        if G.nodes[i]['status'] == 'red':
            colors.append('red')
        if G.nodes[i]['status'] == 'yellow':
            colors.append('yellow')
        if G.nodes[i]['status'] == 'green':
            colors.append('green')

    # edge_lables = nx.get_edge_attributes(G,'weight')
    # fig, ax = plt.subplots()
    # nx.draw(G, ax=ax, with_labels=True, node_color=colors, edge_lables=edge_lables)
    # plt.show()
    # 画图
    # 先画出图的节点和边

    pos = nx.spring_layout(G)
    nx.draw(G, pos)

    # 显示边的属性值
    edge_labels = nx.get_edge_attributes(G, 'weight')
    nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels)

    # 显示节点名
    nx.draw_networkx_labels(G, pos, alpha=0.5, font_color='black')
    # 显示节点
    nx.draw(G, pos, node_color=colors)
    plt.show()

# 获取感染节点，红色被谣言感染，绿色被反谣言感染，黄色没有被感染
# 图G，被谣言感染时间列表，被反谣言感染时间列表
# 返回传播结束后的图，返回各节点的感染时间
def get_infected_nodes(G, r_time_list, c_time_list):
    # print(G.nodes[1])
    # print(type(G.nodes[1]))
    time_list = []
    for i in range(node_number):
        if r_time_list[i]<=c_time_list[i] and r_time_list[i]!=max_path:
            G.nodes[i]['status'] = 'red'
            G.nodes[i]['time'] = r_time_list[i]
            time_list.append(r_time_list[i])
        if r_time_list[i]>c_time_list[i] and c_time_list[i]!=max_path:
            G.nodes[i]['status'] = 'green'
            G.nodes[i]['time'] = c_time_list[i]
            time_list.append(c_time_list[i])
        if r_time_list[i] == c_time_list[i] and r_time_list[i] == max_path:
            G.nodes[i]['status'] = 'yellow'
            G.nodes[i]['time'] = max_path
            time_list.append(max_path)
    # for i in range(node_number):
    #     print(G.nodes[i])
    return G, time_list

# 计算影响强度
def get_impact_strength(G,time_list):
    r_numbers = []
    c_numbers = []
    u_numbers = []
    impact_strength = []
    for i in range(node_number):
        r_count,c_count,u_count = 0, 0, 0
        for j in range(node_number):
            if G.nodes[j]['time'] <= time_list[i] and G.nodes[j]['status'] == 'red':
                r_count+=1
            if G.nodes[j]['time'] <= time_list[i] and G.nodes[j]['status'] == 'green':
                c_count+=1
        u_count = node_number-r_count-c_count
        r_numbers.append(r_count)
        c_numbers.append(c_count)
        u_numbers.append(u_count)
    impact_strength.append(r_numbers)
    impact_strength.append(c_numbers)
    impact_strength.append(u_numbers)
    # print(impact_strength)

    return impact_strength

# 画出影响强度
def show_impact_strength(time_list, impact_strength):
    # 排序
    for i in range(1,len(time_list)):
        for j in range(0,len(time_list)-i):
            if time_list[j] > time_list[j+1]:
                time_list[j],time_list[j+1] = time_list[j+1],time_list[j]
                impact_strength[0][j], impact_strength[0][j + 1] = impact_strength[0][j + 1], impact_strength[0][j]
                impact_strength[1][j], impact_strength[1][j + 1] = impact_strength[1][j + 1], impact_strength[1][j]
                impact_strength[2][j], impact_strength[2][j + 1] = impact_strength[2][j + 1], impact_strength[2][j]

    # print(time_list)
    # print(impact_strength[0])
    # print(impact_strength[1])
    # print(impact_strength[2])

    # 若时间为最大值，则直接弹出
    for i in range(node_number):
        if time_list[-1] == max_path:
            time_list.pop()
            impact_strength[0].pop()
            impact_strength[1].pop()
            impact_strength[2].pop()

    plt.plot(time_list,impact_strength[0],'r--',label = 'rumor')
    plt.plot(time_list, impact_strength[1], 'g--', label='crumor')
    plt.plot(time_list, impact_strength[2], 'y--', label='uninfected')
    plt.xlabel('time')
    plt.ylabel('Smpact Strength')
    plt.legend(loc = 'best')
    plt.show()

# 绘制影响强度整合图
def show_integration(noc_element, random_element, genetic_element, reinforcement_element):
    # # 排序
    # noc_element[0], noc_element[1] = intensity_sorting(noc_element[0], noc_element[1])
    # random_element[0], random_element[1] = intensity_sorting(random_element[0], random_element[1])
    # genetic_element[0], genetic_element[1] = intensity_sorting(genetic_element[0], genetic_element[1])
    #
    # 绘制
    plt.figure()
    plt.subplot(1, 4, 1)
    plt.title('No anti-rumor seed node added')
    plt.plot(noc_element[1], noc_element[0][0], 'r--', label='rumor')
    plt.plot(noc_element[1], noc_element[0][1], 'g--', label='crumor')
    plt.plot(noc_element[1], noc_element[0][2], 'y--', label='uninfected')
    plt.xlabel('time')
    plt.ylabel('impact strength')
    plt.legend(loc='best')

    plt.subplot(1, 4, 2)
    plt.title('Anti-rumor seed nodes are randomly selected')
    plt.plot(random_element[1], random_element[0][0], 'r--', label='rumor')
    plt.plot(random_element[1], random_element[0][1], 'g--', label='crumor')
    plt.plot(random_element[1], random_element[0][2], 'y--', label='uninfected')
    plt.xlabel('time')
    plt.ylabel('impact strength')
    plt.legend(loc='best')

    plt.subplot(1, 4, 3)
    plt.title('Genetic algorithm selects anti-rumor seed node')
    plt.plot(genetic_element[1], genetic_element[0][0], 'r--', label='rumor')
    plt.plot(genetic_element[1], genetic_element[0][1], 'g--', label='crumor')
    plt.plot(genetic_element[1], genetic_element[0][2], 'y--', label='uninfected')
    plt.xlabel('time')
    plt.ylabel('impact strength')
    plt.legend(loc='best')

    plt.subplot(1, 4, 4)
    plt.title('Reinforcement learning algorithm selects anti-rumor seed node')
    plt.plot(reinforcement_element[1], reinforcement_element[0][0], 'r--', label='rumor')
    plt.plot(reinforcement_element[1], reinforcement_element[0][1], 'g--', label='crumor')
    plt.plot(reinforcement_element[1], reinforcement_element[0][2], 'y--', label='uninfected')
    plt.xlabel('time')
    plt.ylabel('impact strength')
    plt.legend(loc='best')
    plt.show()

    # 横向对比 谣言影响强度 反谣言影响强度
    # 取最大的传输时间，然后将数据进行修正
    max_time = noc_element[1][-1]
    if max_time <= random_element[1][-1]:
        max_time = random_element[1][-1]
    if max_time <= genetic_element[1][-1]:
        max_time = genetic_element[1][-1]
    if max_time <= reinforcement_element[1][-1]:
        max_time = reinforcement_element[1][-1]

    max_index = len(noc_element[1])
    if max_index <= len(random_element[1]):
        max_index = len(random_element[1])
    if max_index <= len(genetic_element[1]):
        max_index = len(genetic_element[1])
    if max_index <= len(reinforcement_element):
        max_index = len(reinforcement_element[1])

    # 获得传输时间的分段列表
    x_label_time = list(range(max_time))
    # 初始化纵坐标
    r_n = [-1 for i in range(max_index)]
    r_r = [-1 for i in range(max_index)]
    r_g = [-1 for i in range(max_index)]
    r_d = [-1 for i in range(max_index)]
    c_r = [-1 for i in range(max_index)]
    c_g = [-1 for i in range(max_index)]
    c_d = [-1 for i in range(max_index)]
    print('maxtime:{}'.format(max_index))
    print('r_n:{}'.format(r_n))
    # 将对应时间的影响强度赋值到新列表
    j = 0
    print('noc_element[0][0][j]:{}'.format(noc_element[0][0][j]))
    print('noc_element[1]:{}'.format(noc_element[1]))
    for i in noc_element[1]:
        r_n[i] = noc_element[0][0][j]
        j += 1
    j = 0
    for i in random_element[1]:
        r_r[i] = random_element[0][0][j]
        c_r[i] = random_element[0][1][j]
        j += 1
    j = 0
    for i in genetic_element[1]:
        r_g[i] = genetic_element[0][0][j]
        c_g[i] = genetic_element[0][1][j]
        j += 1

    j = 0
    for i in reinforcement_element[1]:
        r_d[i] = reinforcement_element[0][0][j]
        c_d[i] = reinforcement_element[0][1][j]
        j += 1

    # 若某些时刻没有更新影响强度，那么就将他前一时刻的影响强度赋值给当前时刻
    for i in range(max_time):
        if i == 0:
            continue
        if r_n[i] == -1:
            r_n[i] = r_n[i-1]
        if r_r[i] == -1:
            r_r[i] = r_r[i-1]
        if r_g[i] == -1:
            r_g[i] = r_g[i-1]
        if r_d[i] == -1:
            r_d[i] = r_d[i-1]
        if c_r[i] == -1:
            c_r[i] = c_r[i-1]
        if c_g[i] == -1:
            c_g[i] = c_g[i-1]
        if c_d[i] == -1:
            c_d[i] = c_d[i-1]
    r_n = r_n[0:max_time]
    r_r = r_r[0:max_time]
    r_g = r_g[0:max_time]
    r_d = r_d[0:max_time]
    c_r = c_r[0:max_time]
    c_g = c_g[0:max_time]
    c_d = c_d[0:max_time]


    # 开始画图
    plt.figure()
    plt.subplot(1, 2, 1)
    plt.title('Rumor impact intensity contrast')
    plt.plot(x_label_time, r_n, 'r--', label='NCR')
    plt.plot(x_label_time, r_r, 'g--', label='RANDOM')
    plt.plot(x_label_time, r_g, 'y--', label='GA')
    plt.plot(x_label_time, r_d, 'b--', label='RL')
    plt.xlabel('time')
    plt.ylabel('Rumor influence intensity')
    plt.legend(loc='best')

    plt.subplot(1, 2, 2)
    plt.title('C-Rumor impact intensity contrast')
    plt.plot(x_label_time, c_r, 'g--', label='RANDOM')
    plt.plot(x_label_time, c_g, 'y--', label='GA')
    plt.plot(x_label_time, c_d, 'b--', label='RL')
    plt.xlabel('time')
    plt.ylabel('C-Rumor influence intensity')
    plt.legend(loc='best')

    plt.show()


# 绘制传输时间柱状图
def show_time(noc_element, random_element, genetic_element, reinforcement_element):
    transmission_time = []
    x_label = ['NCR', 'RANDOM', 'GA', 'RL']
    transmission_time.append(noc_element[1][-1])
    transmission_time.append(random_element[1][-1])
    transmission_time.append(genetic_element[1][-1])
    transmission_time.append(reinforcement_element[1][-1])
    color = ['red', 'yellow', 'green', 'black']
    plt.bar(x_label, transmission_time, width=0.6, color=color)
    plt.show()




def intensity_sorting(impact_strength, time_list):
    # 排序
    for i in range(1, len(time_list)):
        for j in range(0, len(time_list) - i):
            if time_list[j] > time_list[j + 1]:
                time_list[j], time_list[j + 1] = time_list[j + 1], time_list[j]
                impact_strength[0][j], impact_strength[0][j + 1] = impact_strength[0][j + 1], impact_strength[0][j]
                impact_strength[1][j], impact_strength[1][j + 1] = impact_strength[1][j + 1], impact_strength[1][j]
                impact_strength[2][j], impact_strength[2][j + 1] = impact_strength[2][j + 1], impact_strength[2][j]

    # print(time_list)
    # print(impact_strength[0])
    # print(impact_strength[1])
    # print(impact_strength[2])

    # 若时间为最大值，则直接弹出
    for i in range(node_number):
        if time_list[-1] == max_path:
            time_list.pop()
            impact_strength[0].pop()
            impact_strength[1].pop()
            impact_strength[2].pop()
    return impact_strength, time_list
# 1.计算种群所有个体的适应度
# 2.寻找适应度最高的两个个体进行繁殖
# 3.繁殖：交叉或编译
# 4.新生成的个体计算适应度，与原来种群进行合并，按适应度大小排序，取原来种群大小的种群，优胜劣汰


# 适应度函数
# (48,time)     不加入反谣言
# (2,time)      加入反谣言，但是谣言不传播
def fitness_function(c_sources, G, r_sources, node_number, r_time_list):
    # 展示随机选取反谣言种子节点后的社交网络图
    temp_G = G
    temp_G = update_graph(temp_G, node_number, r_sources, c_sources)
    # 获取所有节点的单源最短路径
    c_time_list = get_time(G, c_sources)
    # 展示传播完毕后的社交网络图
    temp_finish_G, temp_time_list = get_infected_nodes(temp_G, r_time_list, c_time_list)
    # 获得每个时间段节点的感染数量
    temp_impact_strength = get_impact_strength(temp_finish_G, temp_time_list)
    # 影响强度排序，找出最终结果
    temp_impact_strength, temp_time_list = intensity_sorting(temp_impact_strength, temp_time_list)

    kesei1 = [198, 100]
    kesei2 = [2, 0]
    r_num = temp_impact_strength[0][-1]
    time = temp_time_list[-1]

    g1 = gama[0] * abs((r_num-kesei2[0])/(kesei1[0]-kesei2[0]))
    g2 = gama[1] * abs((time-kesei2[1])/(kesei1[1]-kesei2[1]))
    if g1 > g2:
        max = g1
    else:
        max = g2
    return max

def min2(lists):
    m1 = lists.index(min(lists))
    lists2 = lists.copy()
    lists2.pop(m1)
    m2 = lists2.index(min(lists2))

    return m1, m2


# 繁殖
def breed(population, G, r_sources, node_number, r_time_list):
    fitnesses = []
    # 计算种群中的每个个体的适应度
    for i in range(len(population)):
        print(i)
        c_sources = population[i]
        # 个体适应度求解
        fitness = fitness_function(c_sources, G, r_sources, node_number, r_time_list)
        fitnesses.append(fitness)
    # 交叉变异
    for i in range(10):
        m1, m2 = min2(fitnesses)
        s1 = population[m1]
        s2 = population[m2]
        #对s1和s2进行交叉
        s3 = s1 + s2
        s3 = list(set(s3))
        s = random.sample(s3, k)
        #求交叉后的适应度
        new_fitness = fitness_function(s, G, r_sources, node_number, r_time_list)
        population.append(new_fitness)
        #淘汰个体，维持种群大小不变
        arr = np.array(fitnesses)
        index = arr.argsort()[-p_num:][::-1]
        new_population = []
        new_fitnesses = []
        for i in index:
            new_population.append(population[i])
            new_fitnesses.append(fitnesses[i])
        population = new_population
        fitnesses = new_fitnesses
    # 返回进化好的种群和个体的适应度
    return population, fitnesses

# 基本参数
node_number = 4039    #总节点数
max_path = 10000    #最大路径长度
k = 5               #反谣言种子集大小
# r_sources = [10, 200, 40, 600, 8, 456, 855]   #谣言种子集    #t=0
# t=5
# r_sources = [8, 10, 40, 200, 600,169, 224,213, 264, 329, 334,39, 165, 231, 239, 297, 332,25, 67, 119, 188, 199, 223, 280, 317, 615, 675,21, 48, 62, 87, 94, 142, 172, 186, 229, 258, 308, 315, 323, 342, 578, 595]
# t=10
# r_sources = [8, 10, 40, 200, 600,169, 224,213, 264, 329, 334,39, 165, 231, 239, 297, 332,25, 67, 119, 188, 199, 223, 280, 317, 615, 675,21, 48, 62, 87, 94, 142, 172, 186, 229, 258, 308, 315, 323, 342, 578, 595,56, 79, 96, 109, 113, 121, 128, 156, 176, 197, 203, 232, 252, 277, 285, 290, 318, 632, 658,0, 9, 13, 26, 82, 98, 104, 117, 134, 204, 208, 211, 257, 261, 266, 288, 309, 325, 341, 627, 635, 659,42, 122, 132, 133, 159, 161, 170, 178, 212, 246, 265, 269, 291, 322, 324, 345, 662, 67,29, 31, 53, 66, 84, 85, 118, 125, 130, 154, 158, 175, 183, 185, 259, 260, 271, 300, 304, 314, 320, 331, 339, 343, 577, 582, 599, 640, 665,7, 22, 24, 28, 54, 55, 57, 58, 65, 73, 139, 148, 160, 180, 196, 209, 234, 238, 244, 248, 303, 333, 583]

# t=15
# r_sources = [8, 10, 40, 200, 600,169, 224,213, 264, 329, 334,39, 165, 231, 239, 297, 332,25, 67, 119, 188, 199, 223, 280, 317, 615, 675,21, 48, 62, 87, 94, 142, 172, 186, 229, 258, 308, 315, 323, 342, 578, 595,56, 79, 96, 109, 113, 121, 128, 156, 176, 197, 203, 232, 252, 277, 285, 290, 318, 632, 658,0, 9, 13, 26, 82, 98, 104, 117, 134, 204, 208, 211, 257, 261, 266, 288, 309, 325, 341, 627, 635, 659,42, 122, 132, 133, 159, 161, 170, 178, 212, 246, 265, 269, 291, 322, 324, 345, 662, 67,29, 31, 53, 66, 84, 85, 118, 125, 130, 154, 158, 175, 183, 185, 259, 260, 271, 300, 304, 314, 320, 331, 339, 343, 577, 582, 599, 640, 665,7, 22, 24, 28, 54, 55, 57, 58, 65, 73, 139, 148, 160, 180, 196, 209, 234, 238, 244, 248, 303, 333, 583,1, 19, 23, 30, 33, 101, 149, 168, 189, 214, 249, 268, 284, 295, 311, 313, 346, 414, 643,3, 5, 18, 45, 68, 92, 99, 105, 124, 135, 144, 146, 177, 201, 206, 221, 222, 236, 272, 281, 298, 299, 302, 602, 661, 681,36, 38, 69, 115, 190, 274, 312, 319, 559, 638, 657,14, 20, 27, 41, 59, 72, 75, 100, 123, 136, 163, 242, 245, 340, 404, 419, 526, 558, 576, 593, 673, 678,44, 70, 88, 112, 127, 141, 150, 151, 152, 171, 184, 187, 202, 251, 254, 263, 350, 362, 415, 422, 495, 561, 626, 656, 1357, 1800, 1864, 2068, 2180, 2189, 2451, 2838]

# t=25
# r_sources = [8, 10, 40, 200, 600,169, 224,213, 264, 329, 334,39, 165, 231, 239, 297, 332,25, 67, 119, 188, 199, 223, 280, 317, 615, 675,21, 48, 62, 87, 94, 142, 172, 186, 229, 258, 308, 315, 323, 342, 578, 595,56, 79, 96, 109, 113, 121, 128, 156, 176, 197, 203, 232, 252, 277, 285, 290, 318, 632, 658,0, 9, 13, 26, 82, 98, 104, 117, 134, 204, 208, 211, 257, 261, 266, 288, 309, 325, 341, 627, 635, 659,42, 122, 132, 133, 159, 161, 170, 178, 212, 246, 265, 269, 291, 322, 324, 345, 662, 670,29, 31, 53, 66, 84, 85, 118, 125, 130, 154, 158, 175, 183, 185, 259, 260, 271, 300, 304, 314, 320, 331, 339, 343, 577, 582, 599, 640, 665,7, 22, 24, 28, 54, 55, 57, 58, 65, 73, 139, 148, 160, 180, 196, 209, 234, 238, 244, 248, 303, 333, 583,1, 19, 23, 30, 33, 101, 149, 168, 189, 214, 249, 268, 284, 295, 311, 313, 346, 414, 643,3, 5, 18, 45, 68, 92, 99, 105, 124, 135, 144, 146, 177, 201, 206, 221, 222, 236, 272, 281, 298, 299, 302, 602, 661, 681,36, 38, 69, 115, 190, 274, 312, 319, 559, 638, 657,14, 20, 27, 41, 59, 72, 75, 100, 123, 136, 163, 242, 245, 340, 404, 419, 526, 558, 576, 593, 673, 678,44, 70, 88, 112, 127, 141, 150, 151, 152, 171, 184, 187, 202, 251, 254, 263, 350, 362, 415, 422, 495, 561, 626, 656, 1357, 1800, 1864, 2068, 2180, 2189, 2451, 2838,2, 46, 50, 83, 89, 106, 116, 129, 164, 230, 237, 250, 294, 347, 348, 352, 363, 369, 376, 421, 444, 460, 463, 479, 492, 497, 513, 535, 540, 545, 551, 553, 575, 616, 637, 1075, 1185, 1331, 1387, 1584, 1985, 2007, 2067, 2102, 2111, 2224, 2391, 2598,6, 77, 80, 191, 233, 278, 327, 373, 392, 417, 427, 436, 438, 439, 482, 487, 500, 504, 510, 514, 538, 543, 570, 580, 628, 650, 651, 664, 674, 683, 921, 1025, 1074, 1079, 1110, 1148, 1173, 1199, 1209, 1487, 1488, 1540, 1542, 1545, 1554, 1589, 1609, 1613, 1644, 1780, 1833, 1835, 1849, 1871, 1920, 1925, 1941, 1955, 1984, 1994, 2056, 2087, 2143, 2176, 2187, 2235, 2240, 2246, 2250, 2254, 2267, 2285, 2289, 2294, 2302, 2319, 2332, 2339, 2356, 2363, 2370, 2434, 2463, 2471, 2478, 2489, 2508, 2537, 2539, 2579, 2592, 2603, 2642,16, 107, 108, 143, 226, 289, 355, 378, 386, 394, 400, 402, 412, 420, 428, 434, 445, 452, 455, 457, 458, 471, 483, 496, 503, 506, 511, 515, 516, 523, 525, 537, 542, 546, 548, 554, 557, 563, 588, 609, 611, 663, 669, 980, 983, 999, 1012, 1051, 1070, 1078, 1083, 1086, 1107, 1125, 1126, 1128, 1132, 1149, 1160, 1205, 1230, 1237, 1250, 1312, 1313, 1329, 1330, 1334, 1352, 1367, 1369, 1390, 1399, 1420, 1485, 1516, 1522, 1538, 1572, 1598, 1600, 1603, 1608, 1612, 1617, 1620, 1621, 1622, 1623, 1643, 1668, 1669, 1688, 1707, 1724, 1729, 1730, 1761, 1765, 1772, 1786, 1816, 1819, 1891, 1902, 1909, 1912, 1917, 1939, 1946, 1953, 1971, 1979, 1998, 2003, 2030, 2038, 2039, 2042, 2046, 2047, 2053, 2054, 2073, 2074, 2081, 2095, 2099, 2117, 2133, 2135, 2136, 2139, 2140, 2149, 2153, 2155, 2161, 2169, 2171, 2174, 2196, 2199, 2212, 2215, 2223, 2232, 2233, 2241, 2257, 2264, 2282, 2283, 2323, 2326, 2327, 2336, 2338, 2340, 2343, 2344, 2345, 2359, 2372, 2376, 2384, 2386, 2394, 2398, 2407, 2408, 2416, 2425, 2432, 2458, 2461, 2468, 2479, 2491, 2501, 2510, 2511, 2512, 2540, 2543, 2547, 2552, 2555, 2556, 2564, 2567, 2582, 2588, 2589, 2593, 2594, 2597, 2607, 2608, 2629, 2630, 2643,17, 102, 131, 262, 337, 353, 360, 366, 367, 370, 372, 374, 382, 387, 389, 391, 395, 396, 397, 408, 409, 423, 442, 456, 459, 461, 475, 484, 493, 512, 517, 518, 524, 527, 539, 547, 555, 579, 592, 596, 601, 620, 636, 641, 644, 648, 676, 677, 915, 916, 925, 934, 940, 947, 948, 952, 954, 966, 967, 969, 970, 979, 982, 995, 996, 998, 1004, 1017, 1028, 1032, 1040, 1056, 1059, 1067, 1076, 1085, 1101, 1123, 1124, 1142, 1146, 1153, 1156, 1158, 1175, 1182, 1184, 1191, 1192, 1196, 1198, 1201, 1214, 1222, 1231, 1232, 1238, 1242, 1243, 1255, 1256, 1267, 1271, 1277, 1285, 1288, 1290, 1305, 1311, 1318, 1335, 1336, 1339, 1340, 1358, 1375, 1376, 1377, 1391, 1400, 1423, 1431, 1437, 1446, 1453, 1456, 1473, 1474, 1480, 1482, 1491, 1503, 1509, 1517, 1519, 1520, 1525, 1526, 1528, 1535, 1559, 1563, 1570, 1574, 1580, 1597, 1604, 1610, 1637, 1659, 1661, 1663, 1670, 1683, 1689, 1692, 1697, 1717, 1723, 1736, 1737, 1741, 1746, 1750, 1755, 1757, 1760, 1766, 1768, 1774, 1789, 1791, 1795, 1799, 1809, 1810, 1813, 1826, 1827, 1832, 1845, 1853, 1861, 1867, 1868, 1879, 1886, 1888, 1898, 1907, 1923, 1926, 1929, 1938, 1943, 1944, 1945, 1947, 1948, 1954, 1959, 1966, 1986, 2000, 2002, 2005, 2010, 2021, 2026, 2028, 2031, 2032, 2037, 2040, 2043, 2045, 2052, 2057, 2058, 2059, 2060, 2064, 2069, 2071, 2078, 2084, 2086, 2088, 2093, 2096, 2098, 2103, 2104, 2115, 2118, 2122, 2125, 2127, 2128, 2134, 2138, 2142, 2144, 2148, 2150, 2151, 2154, 2172, 2179, 2184, 2188, 2190, 2191, 2194, 2198, 2201, 2210, 2213, 2216, 2218, 2229, 2239, 2242, 2244, 2249, 2261, 2266, 2268, 2270, 2271, 2276, 2279, 2287, 2288, 2290, 2299, 2306, 2307, 2308, 2315, 2324, 2325, 2329, 2333, 2342, 2347, 2352, 2354, 2368, 2369, 2374, 2377, 2381, 2387, 2390, 2396, 2409, 2410, 2414, 2417, 2419, 2420, 2423, 2436, 2440, 2445, 2447, 2460, 2462, 2469, 2472, 2477, 2482, 2484, 2485, 2492, 2495, 2502, 2504, 2507, 2509, 2520, 2521, 2530, 2532, 2533, 2535, 2544, 2549, 2550, 2553, 2557, 2559, 2574, 2575, 2576, 2578, 2581, 2590, 2600, 2602, 2609, 2611, 2613, 2619, 2624, 2635, 2637, 2640, 2646, 2649, 2654, 2655, 2660, 2814, 2885,95, 330, 354, 357, 359, 361, 406, 418, 432, 468, 469, 473, 494, 505, 507, 520, 522, 534, 536, 544, 560, 565, 566, 567, 584, 589, 591, 603, 605, 614, 619, 630, 633, 639, 646, 666, 896, 897, 917, 919, 920, 930, 932, 942, 946, 949, 953, 986, 993, 997, 1003, 1006, 1013, 1024, 1026, 1029, 1039, 1046, 1047, 1049, 1064, 1066, 1099, 1122, 1130, 1163, 1172, 1211, 1227, 1239, 1269, 1278, 1280, 1291, 1292, 1293, 1308, 1309, 1319, 1323, 1328, 1332, 1341, 1344, 1347, 1355, 1359, 1361, 1365, 1368, 1370, 1374, 1389, 1393, 1402, 1408, 1416, 1426, 1432, 1435, 1438, 1440, 1447, 1448, 1449, 1457, 1460, 1465, 1467, 1471, 1475, 1483, 1490, 1492, 1507, 1512, 1514, 1515, 1523, 1530, 1536, 1537, 1539, 1543, 1547, 1551, 1553, 1556, 1565, 1571, 1573, 1577, 1582, 1590, 1591, 1596, 1614, 1618, 1619, 1635, 1636, 1639, 1640, 1652, 1653, 1662, 1665, 1675, 1679, 1687, 1694, 1695, 1714, 1718, 1719, 1720, 1734, 1740, 1742, 1747, 1752, 1753, 1754, 1769, 1770, 1793, 1804, 1806, 1807, 1811, 1818, 1829, 1834, 1836, 1839, 1842, 1844, 1847, 1863, 1870, 1877, 1893, 1897, 1900, 1918, 1919, 1932, 1940, 1951, 1957, 1962, 1963, 1965, 1968, 1970, 1972, 1973, 1974, 1981, 1983, 1993, 1997, 2001, 2009, 2011, 2020, 2033, 2044, 2055, 2063, 2065, 2066, 2072, 2075, 2077, 2083, 2090, 2092, 2101, 2108, 2110, 2112, 2121, 2123, 2124, 2131, 2132, 2145, 2163, 2164, 2165, 2183, 2200, 2203, 2206, 2208, 2211, 2220, 2221, 2237, 2243, 2247, 2253, 2258, 2259, 2273, 2274, 2275, 2278, 2280, 2286, 2292, 2293, 2297, 2300, 2301, 2303, 2328, 2330, 2331, 2334, 2348, 2351, 2353, 2361, 2364, 2366, 2379, 2383, 2392, 2393, 2399, 2404, 2413, 2418, 2424, 2427, 2428, 2430, 2433, 2438, 2446, 2459, 2464, 2465, 2475, 2494, 2498, 2499, 2500, 2506, 2525, 2526, 2529, 2536, 2538, 2542, 2546, 2551, 2560, 2561, 2563, 2571, 2573, 2583, 2586, 2591, 2599, 2601, 2604, 2606, 2615, 2616, 2617, 2623, 2625, 2631, 2636, 2638, 2653, 2659,91, 140, 219, 307, 368, 388, 410, 416, 426, 431, 462, 465, 486, 528, 529, 556, 573, 597, 604, 606, 612, 618, 629, 647, 655, 684, 906, 908, 924, 926, 927, 939, 941, 959, 960, 962, 963, 978, 981, 984, 989, 1001, 1005, 1014, 1019, 1021, 1044, 1050, 1054, 1068, 1069, 1080, 1087, 1092, 1095, 1100, 1104, 1109, 1112, 1113, 1116, 1117, 1135, 1136, 1138, 1152, 1155, 1157, 1179, 1180, 1183, 1195, 1200, 1204, 1210, 1235, 1245, 1246, 1265, 1272, 1273, 1274, 1275, 1283, 1284, 1286, 1289, 1299, 1300, 1302, 1303, 1316, 1317, 1343, 1348, 1380, 1388, 1396, 1398, 1409, 1425, 1427, 1441, 1461, 1462, 1470, 1472, 1481, 1489, 1493, 1524, 1531, 1549, 1557, 1576, 1595, 1605, 1606, 1611, 1615, 1616, 1628, 1646, 1650, 1656, 1671, 1673, 1674, 1677, 1685, 1702, 1712, 1715, 1721, 1722, 1732, 1735, 1743, 1763, 1783, 1796, 1823, 1824, 1828, 1851, 1852, 1857, 1860, 1873, 1878, 1881, 1895, 1899, 1916, 1921, 1935, 1976, 1980, 1982, 1987, 1989, 1995, 2018, 2027, 2036, 2062, 2097, 2109, 2137, 2141, 2182, 2186, 2193, 2202, 2205, 2207, 2222, 2226, 2228, 2252, 2295, 2304, 2311, 2318, 2362, 2367, 2389, 2395, 2397, 2415, 2429, 2435, 2444, 2449, 2454, 2467, 2473, 2476, 2493, 2496, 2516, 2518, 2519, 2522, 2554, 2568, 2577, 2610, 2612, 2626, 2627, 2633, 2641, 2644, 2648, 2658, 3674, 3943,380, 398, 407, 437, 440, 448, 478, 490, 508, 621, 623, 680, 682, 685, 914, 933, 951, 957, 975, 976, 1000, 1020, 1037, 1048, 1052, 1060, 1081, 1091, 1108, 1115, 1120, 1129, 1131, 1133, 1159, 1188, 1190, 1193, 1197, 1207, 1215, 1216, 1217, 1219, 1221, 1236, 1241, 1261, 1282, 1287, 1307, 1315, 1320, 1322, 1324, 1345, 1350, 1351, 1353, 1366, 1373, 1385, 1395, 1401, 1406, 1411, 1414, 1415, 1422, 1439, 1445, 1454, 1459, 1463, 1478, 1484, 1494, 1495, 1498, 1502, 1506, 1513, 1532, 1534, 1541, 1558, 1566, 1583, 1602, 1624, 1632, 1645, 1647, 1648, 1655, 1678, 1680, 1681, 1682, 1684, 1691, 1699, 1700, 1710, 1716, 1727, 1728, 1738, 1781, 1782, 1794, 1798, 1803, 1812, 1815, 1817, 1831, 1843, 1858, 1859, 1872, 1885, 1901, 1910, 1911, 1913, 1928, 1931, 1934, 1964, 1999, 2022, 2050, 2070, 2076, 2116, 2126, 2147, 2156, 2177, 2209, 2296, 2305, 2309, 2313, 2322, 2337, 2365, 2378, 2401, 2406, 2452, 2474, 2480, 2488, 2503, 2524, 2566, 2572, 2585, 2605, 2628, 2647, 2652, 2656, 2657,147, 349, 390, 413, 425, 430, 474, 488, 491, 550, 571, 598, 617, 645, 654, 898, 902, 913, 922, 945, 958, 968, 971, 988, 990, 992, 1008, 1009, 1015, 1022, 1033, 1035, 1036, 1043, 1057, 1082, 1102, 1114, 1134, 1140, 1141, 1170, 1171, 1178, 1181, 1212, 1228, 1229, 1257, 1259, 1281, 1297, 1306, 1321, 1346, 1349, 1364, 1378, 1379, 1392, 1413, 1418, 1428, 1433, 1442, 1443, 1452, 1458, 1469, 1479, 1497, 1505, 1508, 1529, 1550, 1562, 1567, 1578, 1585, 1630, 1638, 1642, 1649, 1666, 1672, 1696, 1703, 1709, 1744, 1758, 1785, 1790, 1820, 1825, 1837, 1841, 1850, 1856, 1862, 1876, 1882, 1884, 1894, 1903, 1922, 1942, 1960, 1991, 2012, 2013, 2016, 2024, 2082, 2085, 2107, 2129, 2152, 2159, 2181, 2214, 2217, 2225, 2231, 2234, 2272, 2310, 2312, 2341, 2346, 2355, 2403, 2443, 2450, 2490, 2497, 2513, 2620, 2651, 2683, 2686, 2698, 2737, 2779, 2872, 2965, 2976, 2997, 3003, 3059, 3114, 3204, 3217, 3226, 3259, 3303, 3306, 3409, 3596, 3633, 3886, 3948,173, 433, 470, 489, 533, 625, 909, 936, 965, 972, 1007, 1041, 1062, 1084, 1106, 1137, 1139, 1166, 1202, 1225, 1258, 1279, 1294, 1298, 1333, 1342, 1371, 1404, 1405, 1407, 1486, 1496, 1511, 1548, 1568, 1569, 1587, 1592, 1625, 1633, 1651, 1658, 1686, 1708, 1745, 1748, 1751, 1767, 1787, 1838, 1846, 1875, 1889, 1904, 1908, 1914, 1952, 2004, 2019, 2029, 2048, 2160, 2166, 2173, 2185, 2192, 2197, 2236, 2265, 2284, 2335, 2350, 2360, 2371, 2380, 2385, 2411, 2517, 2523, 2531, 2570, 2632, 2634, 2639, 2664, 2674, 2715, 2745, 2757, 2758, 2759, 2796, 2818, 2866, 2887, 2898, 2958, 2966, 2973, 2974, 2987, 3006, 3104, 3140, 3175, 3261, 3272, 3335, 3353, 3366, 3381, 3382, 3390, 3427, 3448, 3501, 3734, 3790, 3971,364, 385, 403, 449, 509, 562, 568, 574, 634, 653, 901, 903, 955, 964, 994, 1010, 1018, 1089, 1127, 1151, 1164, 1187, 1189, 1223, 1249, 1338, 1381, 1382, 1384, 1397, 1436, 1444, 1451, 1464, 1504, 1527, 1588, 1601, 1626, 1634, 1693, 1704, 1725, 1764, 1773, 1776, 1778, 1779, 1802, 1906, 1927, 1958, 1978, 1988, 1990, 2006, 2014, 2025, 2061, 2100, 2175, 2260, 2277, 2298, 2314, 2373, 2400, 2402, 2405, 2439, 2534, 2545, 2584, 2614, 2661, 2731, 2738, 2754, 2777, 2782, 2792, 2853, 2875, 2904, 2912, 2913, 2925, 2937, 2956, 2986, 2998, 3017, 3049, 3052, 3057, 3082, 3090, 3132, 3142, 3164, 3178, 3188, 3198, 3233, 3254, 3263, 3267, 3274, 3287, 3295, 3296, 3324, 3348, 3351, 3365, 3391, 3395, 3397, 3399, 3411, 3417, 3480, 3495, 3609, 3651, 3670, 3677, 3741, 3760, 3788, 3804, 3824, 3851]

# t=30
r_sources

time_list = []      #节点感染时间

p_num = 500          #种群大小
population = []     #种群
gama = [0.6, 0.4]   #权重向量

data = pd.read_csv('../data/wiki_vote/wiki_vote_matrix.csv')
matrix = np.asarray(data)



if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO,
                        filename='../log/genetic_algorithm_log.txt',
                        filemode='w',
                        format='%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s')

    # 生成社交网络图
    G = nx.from_numpy_matrix(matrix)
    G = get_graph(G, node_number, r_sources, [])

    '''保存图信息'''
    r_time_list = get_time(G, r_sources)

    '''3.基于分解的多目标遗传算法'''
    #生成种群
    population = produce_population(population, k, p_num, node_number, r_sources)
    #繁殖
    population, fitnesses = breed(population, G, r_sources, node_number, r_time_list)
    # 获取种群中适应度最大的个体
    index = fitnesses.index(min(fitnesses))
    genetic_c_sources = population[index]
    #画出当前个体的图
    logging.info("当t=30时，多目标遗传算法的反谣言种子集{}".format(genetic_c_sources))





